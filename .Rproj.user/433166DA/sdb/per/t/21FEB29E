{
    "contents" : "---\ntitle: \"Volatility of Assets and Portfolios\"\nauthor: \"Emily Miller\"\ndate: \"July 2015\"\noutput:\n  pdf_document:\n  includes:\n  in_header: pdflscape.tex\n  number_sections: yes\n  word_document: default\n---\n\n# Introduction\nIn this article, we will explore how the MVaRonVaR is a good measurement to show the most volatile asset within a portfolio. We will look at how R has been used to find the expected most volatile asset, and the actual most volatile asset. This will then be used to find what percentage of the time the two match up. \n\nThrough doing this we can see the volatiliy of certain assets and look at which assets are the most volatile. As well as the frequencies at which they appear at the top. \n\nThis is all done through the Vivaldi database.\n\n```{r LoadPackages, message=FALSE, echo=TRUE}\nlibrary(ggplot2)\n```\n\\newpage\n\n# Risk/Weight Ratio\n\nRisk/Weight Ratio allows us to see which asset has the highest volatility per Weight. This means that this asset may not be the one that affects the portfolio enough (because it has a small weight) however means that if all the weights +were to be equal within the portfolio then this would be the asset which would cause the portfolio to be more volatile.\n\nLooking at the portfolio \"Old Mutual UK Mid Cap Fund\" (UKMCO, Portfolio number 42) we can see which asset has the most movement and volatility within the portfolio each day or week over a given time period.\n\nFor example, over the past two years we can see on a graph, what was the most expected volatile asset each week.\n```{r firstChunk, echo=FALSE}\nfinalSet <- readRDS(\"riskSet_allData\")\nfinalSet.agg <- aggregate(RiskByWeight ~ pDate, finalSet, max)\n\n# then simply merge with the original\nfinalSet.max <- merge(finalSet.agg, finalSet)\nfinalSet.max$Descr <- factor(finalSet.max$Descr)\n\nx <-finalSet.max$pDate \ny <-factor(finalSet.max$Descr)\n\n#qplot(x,y)\nggplot(data.frame(x, y), aes(x,y)) + geom_point() + xlab(\"\")+ylab(\"\")\n\n```\n\nCurrently Optimal Payments and Just Eat are the expected most volatile asset. However this does not mean that it will necessarily affect the portfolio as such, as this set of data does not take into account the weight (size) of the asset within the portfolio. There can be an asset which is less volatile but due to its size it has the biggest affect on the portfolio, we will look at this later. \n\nThe expected most volatile asset varys throughout the different industry groups throughout the two years. For example, we can see that the industry sector varies from Consumer, Cyclical to Communications. There is a lot more diversity within the Industry group. \n\nAs you can see, to begin with Thomas Cook is the most expected volatile asset, and continues to be for a long time. Over the sample period, we can see that Thomas Cook Group was the most frequently expected volatile asset. However, stops being so somewhere in the middle of 2014. It was sold at this time so no longer has any weighting in the portfolio. This can be seen by finding the assets weight every week over the two year period. \n\n```{r SecondChunk, echo=FALSE}\nfinalSet <- readRDS(\"ThomasCookWeight\")\nplot(x = finalSet$pDate, y = finalSet$Weight, xlab = \"Date\", ylab = \"Weight\")\n\n```\n\nThe graph above confirms the idea that the asset was sold from the portfolio by the continuining line on the zero y-axes. This shows that Thomas Cook Group had a weighting of zero (no weight) within the portfolio.\n\n\\newpage\n\n# Total Risk Expected\n\nThe total risk produced, takes into account the weighting of the asset aswell as its risk, instead of finding the ratio it finds the total risk value. From the graph we can see that the asset expected to affect the portfolio the most is different to the assets seen before for the ratio.\n\n```{r ThirdChunk, echo=FALSE}\nfinalSet.max <- readRDS(\"totalassetWeights\")\nx <-finalSet.max$pDate \ny <-factor(finalSet.max$Descr)\n\n#qplot(x,y)\nggplot(data.frame(x, y), aes(x,y)) + geom_point() + xlab(\"\")+ylab(\"\")\n\n```\n\nIn this case, the asset with the highest volatiliy frequency expected over the two years is Ashtead Group. This can be seen by the table above. Ashstead has been expected to have had the most influence on what happens to the portfolio for a large period of the past two years. The majority of this was in the year 2014, Ashtead was the highest influencer expected of the portfolio for the majority of 2014. \n\nAs you can see, recently, Just Eat and Optimal Payments have been expected to be the highest influence on the portfolio. This is because the Just Eat asset is new to the market. This stops the beta value from being accurate as the scatter plots are so vaired (due to the asset being new) so it is difficult to find a truely accurate line of regression to base the beta around. We will look at the accuracy of the Beta Value later on. \n\nJust Eat and Optimal Payments were the most volatile for both the Total risk expected and the Risk Weight ratio expected. \n\n\\newpage\n\n# Total Risk Reality\n\nWe can look at what the actual asset that affected the portfolio the most each week was. This can be done by looking at the data from the past two years. \n\n```{r FourthChunk, echo=FALSE}\nperfSet <- readRDS(\"ActualRisk\")\nx <-perfSet$pDate \ny <-factor(perfSet$assetName)\n\n#qplot(x,y)\nggplot(data.frame(x, y), aes(x,y)) + geom_point() + xlab(\"\")+ylab(\"\")\n\n```\n\nFrom looking at the graph, we see that the assets affecting the portfolio the most is a much more varied list then that expected. The list of actual contributors over the past two years includes a larger diversity in Industry Sector and Industry Group. The expected assets do appear in the actual assets quite frequently as expected. \n\nThe graph allows us to see how the market can fluctuate and change regularly. There will be human and physical factors that affect the volatility of an Asset. For example, in the graph we can see that many of the assets only appear once as the most affecting asset. This helps us to see the unpredictable nature of the market.\n\nIn the case of EasyJet, we can see that this asset only appears once, it could be that in this particular week EasyJet had a significant corporate event. This is simply not predictable.\n\n\\newpage\n\n# Percentage of matches between expected and reality\n\nFrom seeing which assets contribute the most to the portfolios volatility, and the expected assets for this. We can now use this information to find the percentage of the time over the two year period where the expected value was correct.\n\nBelow is the dates and assets where the expected matches the actual. As you can see, that for the period of time of two years, there was a small amount of matching. Ashtead group matched the most to begin with. The trend spotted earlier can be recognised in this table, where Ashtead is early on, and then recently the highest contributor is Just Eat. The most recent match was Optimal Payments, which, shown in our other graphs is becoming a larger contributor more recently.\n\n```{r FifthChunk, echo=FALSE}\nSuccess <- readRDS(\"success\")\nprint(Success)\n\n```\n\nThe probability of getting a correct matching over the two years was \n```{r sixthChunk, echo=FALSE}\nrm(list =ls(all=TRUE))\n\nperfSet <- readRDS(\"perfSet\")\nfinalSet <- readRDS(\"riskSet_allData\")\n\n# Define top n risk contributors\nn = 1\n\ntypicalPortSize <- nrow(finalSet)/nrow(perfSet)\nfinalSet$WBeta <- finalSet$Weight*finalSet$Beta\n\n#change this to perform different sorting\n##############################\nselector <- finalSet$MVaRonVaR\n##############################\n\n#order the risk contributors by date\nfinalSet <- finalSet[order(finalSet$pDate, selector, decreasing = T),]\n#pick the top n\nriskSet <- \n  finalSet[ave(selector, finalSet$pDate, FUN = seq_along) <= n, ]\n#saveRDS(riskSet, file=\"riskSet\")\n\n\n#uniquePerfComp <- unique(perfSet[,c(\"assetName\", \"assetCode\")])\nuniqueRiskComp <- unique(riskSet[,c(\"AssetId\", \"Descr\")])\n\nperfSet[3] <- lapply(perfSet[3], as.character)\n\nfor(code in uniqueRiskComp$AssetId) {\n  perfSet$assetCode[perfSet$assetCode == substr(code, 1,6)] <- code\n}\n  \ncombSet <- merge(perfSet, riskSet, by.x = \"pDate\" , by.y = \"pDate\")\n\ncombSet$Test <- combSet$assetCode == combSet$AssetId\nmatch <- sum(combSet$Test)/nrow(perfSet)\nprint(match)\n```\n.\nThis is 20% of the time, which is not a huge amount of the time. This again helps to show the unpredictable nature of the market. \n\n\nWe can compare the values of MVaRonVaR with Weight*Beta, and the values of MVar/Weight with the values of Beta to see which gives the better percentage, and is the more accurate measurement. \n\nThe accuracy for MVaRonVaR is \n```{r SeventhChunk, echo=FALSE}\nrm(list =ls(all=TRUE))\n\nperfSet <- readRDS(\"perfSet\")\nfinalSet <- readRDS(\"riskSet_allData\")\n\n# Define top n risk contributors\nn = 1\n\ntypicalPortSize <- nrow(finalSet)/nrow(perfSet)\nfinalSet$WBeta <- finalSet$Weight*finalSet$Beta\n\n#change this to perform different sorting\n##############################\nselector <- finalSet$MVaRonVaR\n##############################\n\n#order the risk contributors by date\nfinalSet <- finalSet[order(finalSet$pDate, selector, decreasing = T),]\n#pick the top n\nriskSet <- \n  finalSet[ave(selector, finalSet$pDate, FUN = seq_along) <= n, ]\n#saveRDS(riskSet, file=\"riskSet\")\n\n\n#uniquePerfComp <- unique(perfSet[,c(\"assetName\", \"assetCode\")])\nuniqueRiskComp <- unique(riskSet[,c(\"AssetId\", \"Descr\")])\n\nperfSet[3] <- lapply(perfSet[3], as.character)\n\nfor(code in uniqueRiskComp$AssetId) {\n  perfSet$assetCode[perfSet$assetCode == substr(code, 1,6)] <- code\n}\n  \ncombSet <- merge(perfSet, riskSet, by.x = \"pDate\" , by.y = \"pDate\")\n\ncombSet$Test <- combSet$assetCode == combSet$AssetId\nmatch <- sum(combSet$Test)/nrow(perfSet)\nprint(match)\n```\n\nAnd the accuracy of the Weight*Beta is \n```{r EightChunk, echo=FALSE}\nrm(list =ls(all=TRUE))\n\nperfSet <- readRDS(\"perfSet\")\nfinalSet <- readRDS(\"riskSet_allData\")\n\n# Define top n risk contributors\nn = 1\n\ntypicalPortSize <- nrow(finalSet)/nrow(perfSet)\nfinalSet$WBeta <- finalSet$Weight*finalSet$Beta\n\n#change this to perform different sorting\n##############################\nselector <- finalSet$WBeta\n##############################\n\n#order the risk contributors by date\nfinalSet <- finalSet[order(finalSet$pDate, selector, decreasing = T),]\n#pick the top n\nriskSet <- \n  finalSet[ave(selector, finalSet$pDate, FUN = seq_along) <= n, ]\n#saveRDS(riskSet, file=\"riskSet\")\n\n\n#uniquePerfComp <- unique(perfSet[,c(\"assetName\", \"assetCode\")])\nuniqueRiskComp <- unique(riskSet[,c(\"AssetId\", \"Descr\")])\n\nperfSet[3] <- lapply(perfSet[3], as.character)\n\nfor(code in uniqueRiskComp$AssetId) {\n  perfSet$assetCode[perfSet$assetCode == substr(code, 1,6)] <- code\n}\n  \ncombSet <- merge(perfSet, riskSet, by.x = \"pDate\" , by.y = \"pDate\")\n\ncombSet$Test <- combSet$assetCode == combSet$AssetId\nmatch <- sum(combSet$Test)/nrow(perfSet)\nprint(match)\n```\n\nFrom the two values, we can see that the MVaRonVaR is a more accurate way of determining the asset with the highest contribution to the portfolio.\n\nThis is backed up by the fact that the accuracy of MVaR/Weight is \n\n```{r NinethChunk, echo=FALSE}\nrm(list =ls(all=TRUE))\n\nperfSet <- readRDS(\"perfSet\")\nfinalSet <- readRDS(\"riskSet_allData\")\n\n# Define top n risk contributors\nn = 1\n\ntypicalPortSize <- nrow(finalSet)/nrow(perfSet)\nfinalSet$WBeta <- finalSet$Weight*finalSet$Beta\n\n#change this to perform different sorting\n##############################\nselector <- finalSet$RiskByWeight\n##############################\n\n#order the risk contributors by date\nfinalSet <- finalSet[order(finalSet$pDate, selector, decreasing = T),]\n#pick the top n\nriskSet <- \n  finalSet[ave(selector, finalSet$pDate, FUN = seq_along) <= n, ]\n#saveRDS(riskSet, file=\"riskSet\")\n\n\n#uniquePerfComp <- unique(perfSet[,c(\"assetName\", \"assetCode\")])\nuniqueRiskComp <- unique(riskSet[,c(\"AssetId\", \"Descr\")])\n\nperfSet[3] <- lapply(perfSet[3], as.character)\n\nfor(code in uniqueRiskComp$AssetId) {\n  perfSet$assetCode[perfSet$assetCode == substr(code, 1,6)] <- code\n}\n  \ncombSet <- merge(perfSet, riskSet, by.x = \"pDate\" , by.y = \"pDate\")\n\ncombSet$Test <- combSet$assetCode == combSet$AssetId\nmatch <- sum(combSet$Test)/nrow(perfSet)\n\nprint(match)\n```\n\nand the accuracy of Beta is \n\n```{r TenthChunk, echo=FALSE}\nrm(list =ls(all=TRUE))\n\nperfSet <- readRDS(\"perfSet\")\nfinalSet <- readRDS(\"riskSet_allData\")\n\n# Define top n risk contributors\nn = 1\n\ntypicalPortSize <- nrow(finalSet)/nrow(perfSet)\nfinalSet$WBeta <- finalSet$Weight*finalSet$Beta\n\n#change this to perform different sorting\n##############################\nselector <- finalSet$Beta\n##############################\n\n#order the risk contributors by date\nfinalSet <- finalSet[order(finalSet$pDate, selector, decreasing = T),]\n#pick the top n\nriskSet <- \n  finalSet[ave(selector, finalSet$pDate, FUN = seq_along) <= n, ]\n#saveRDS(riskSet, file=\"riskSet\")\n\n\n#uniquePerfComp <- unique(perfSet[,c(\"assetName\", \"assetCode\")])\nuniqueRiskComp <- unique(riskSet[,c(\"AssetId\", \"Descr\")])\n\nperfSet[3] <- lapply(perfSet[3], as.character)\n\nfor(code in uniqueRiskComp$AssetId) {\n  perfSet$assetCode[perfSet$assetCode == substr(code, 1,6)] <- code\n}\n  \ncombSet <- merge(perfSet, riskSet, by.x = \"pDate\" , by.y = \"pDate\")\n\ncombSet$Test <- combSet$assetCode == combSet$AssetId\nmatch <- sum(combSet$Test)/nrow(perfSet)\n\nprint(match)\n```\n\n#Conclusion\n\nOverall we can see that using the MVaRonVaR is the most accurate way of predicting the most volatile asset in the portfolio. However, we can see that this is not a huge percentage of the  time accurate.\n",
    "created" : 1435844893138.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2883356295",
    "id" : "21FEB29E",
    "lastKnownWriteTime" : 1435923517,
    "path" : "P:/MillerE/RProjects/ODBCtest/newsletter.Rmd",
    "project_path" : "newsletter.Rmd",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}